<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_local.matcher" xmlns:impl="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_local.matcher" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:intf="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_local.matcher">
  <wsdl:types>
    <schema elementFormDefault="qualified" targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_local.matcher" xmlns="http://www.w3.org/2001/XMLSchema">
      <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <xsd:documentation>Finds the best local alignments between two
                  sequences</xsd:documentation>
      </xsd:annotation>
      <element name="runAndWaitFor">
        <complexType>
          <sequence>
            <element name="matcher" type="impl:Tmatcher"/>
          </sequence>
        </complexType>
      </element>
      <simpleType name="TmatcherAsequenceSformat1">
        <restriction base="xsd:string">
          <enumeration value="gcg"/>
          <enumeration value="gcg8"/>
          <enumeration value="embl"/>
          <enumeration value="swiss"/>
          <enumeration value="fasta"/>
          <enumeration value="ncbi"/>
          <enumeration value="genbank"/>
          <enumeration value="nbrf"/>
          <enumeration value="pir"/>
          <enumeration value="codata"/>
          <enumeration value="strider"/>
          <enumeration value="clustal"/>
          <enumeration value="phylip"/>
          <enumeration value="acedb"/>
          <enumeration value="msf"/>
          <enumeration value="jackknifer"/>
          <enumeration value="jackknifernon"/>
          <enumeration value="nexus"/>
          <enumeration value="nexusnon"/>
          <enumeration value="treecon"/>
          <enumeration value="mega"/>
          <enumeration value="meganon"/>
          <enumeration value="ig"/>
          <enumeration value="staden"/>
          <enumeration value="text"/>
          <enumeration value="raw"/>
        </restriction>
      </simpleType>
      <complexType name="TmatcherAsequence">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="asequence_direct_data" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="asequence_usa" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="sformat1" type="impl:TmatcherAsequenceSformat1"/>
          <element maxOccurs="1" minOccurs="0" name="sbegin1" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="send1" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="sprotein1" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="snucleotide1" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="sreverse1" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="slower1" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="supper1" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <simpleType name="TmatcherBsequenceSformat2">
        <restriction base="xsd:string">
          <enumeration value="gcg"/>
          <enumeration value="gcg8"/>
          <enumeration value="embl"/>
          <enumeration value="swiss"/>
          <enumeration value="fasta"/>
          <enumeration value="ncbi"/>
          <enumeration value="genbank"/>
          <enumeration value="nbrf"/>
          <enumeration value="pir"/>
          <enumeration value="codata"/>
          <enumeration value="strider"/>
          <enumeration value="clustal"/>
          <enumeration value="phylip"/>
          <enumeration value="acedb"/>
          <enumeration value="msf"/>
          <enumeration value="jackknifer"/>
          <enumeration value="jackknifernon"/>
          <enumeration value="nexus"/>
          <enumeration value="nexusnon"/>
          <enumeration value="treecon"/>
          <enumeration value="mega"/>
          <enumeration value="meganon"/>
          <enumeration value="ig"/>
          <enumeration value="staden"/>
          <enumeration value="text"/>
          <enumeration value="raw"/>
        </restriction>
      </simpleType>
      <complexType name="TmatcherBsequence">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="bsequence_direct_data" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="bsequence_usa" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="sformat2" type="impl:TmatcherBsequenceSformat2"/>
          <element maxOccurs="1" minOccurs="0" name="sbegin2" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="send2" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="sprotein2" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="snucleotide2" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="sreverse2" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="slower2" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="supper2" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <complexType name="TmatcherDatafile">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="datafile_direct_data" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="datafile_url" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="Tmatcher">
        <sequence>
          <element name="asequence" type="impl:TmatcherAsequence">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:documentation>qualifiers for parameter: asequence</xsd:documentation>
            </xsd:annotation>
          </element>
          <element name="bsequence" type="impl:TmatcherBsequence">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:documentation>qualifiers for parameter: bsequence</xsd:documentation>
            </xsd:annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="datafile" type="impl:TmatcherDatafile">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                <emboss:prompt>Matrix file</emboss:prompt>
              </xsd:appinfo>
              <xsd:documentation>This is the scoring matrix file used when comparing
           sequences. By default it is the file 'EBLOSUM62' (for proteins) or
           the file 'EDNAFULL' (for nucleic sequences). These files are
           found in the 'data' directory of the EMBOSS installation.</xsd:documentation>
            </xsd:annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="alternatives" type="xsd:long">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                <emboss:prompt>Number of alternative matches</emboss:prompt>
              </xsd:appinfo>
              <xsd:documentation>This sets the number of alternative matches output. By
           default only the highest scoring alignment is shown. A value of 2
           gves you other reasonable alignments. In some cases, for example
           multidomain proteins of cDNA and gemomic DNA comparisons, there
           may be other interesting and significant alignments.</xsd:documentation>
            </xsd:annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="gappenalty" type="xsd:long">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                <emboss:prompt>Gap penalty</emboss:prompt>
              </xsd:appinfo>
              <xsd:documentation>The gap penalty is the score taken away when a gap is
           created. The best value depends on the choice of comparison
           matrix. The default value of 14 assumes you are using the
           EBLOSUM62 matrix for protein sequences, or a value of 16 and the
           EDNAFULL matrix for nucleotide sequences.</xsd:documentation>
            </xsd:annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="gaplength" type="xsd:long">
            <xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                <emboss:prompt>Gap length penalty</emboss:prompt>
              </xsd:appinfo>
              <xsd:documentation>The gap length, or gap extension, penalty is added to the
           standard gap penalty for each base or residue in the gap. This is
           how long gaps are penalized. Usually you will expect a few long
           gaps rather than many short gaps, so the gap extension penalty
           should be lower than the gap penalty. An exception is where one or
           both sequences are single reads with possible sequencing errors
           in which case you would expect many single base gaps. You can get
           this result by setting the gap penalty to zero (or very low) and
           using the gap extension penalty to control gap scoring.</xsd:documentation>
            </xsd:annotation>
          </element>
        </sequence>
      </complexType>
      <element name="runAndWaitForResponse">
        <complexType>
          <sequence>
            <element name="matcherResult" type="impl:TmatcherResult"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="TmatcherResult">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="report" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="detailed_status" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="outfile" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="TSoaplabException">
        <sequence/>
      </complexType>
      <element name="fault" type="impl:TSoaplabException"/>
      <element name="createAndRun">
        <complexType>
          <sequence>
            <element name="matcher" type="impl:Tmatcher"/>
          </sequence>
        </complexType>
      </element>
      <element name="createAndRunResponse">
        <complexType>
          <sequence>
            <element name="jobid" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="waitFor">
        <complexType>
          <sequence>
            <element name="jobid" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="waitForResponse">
        <complexType/>
      </element>
      <element name="getStatus">
        <complexType>
          <sequence>
            <element name="jobid" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="getStatusResponse">
        <complexType>
          <sequence>
            <element name="status" type="impl:Tstatus"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="Tstatus">
        <sequence>
          <element name="inProgress" type="xsd:boolean"/>
          <element name="detailed" type="xsd:string"/>
          <element name="erroneous" type="xsd:boolean"/>
          <element name="description" type="xsd:string"/>
          <element name="completed" type="xsd:boolean"/>
          <element name="asString" type="xsd:string"/>
          <element name="successful" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <element name="getResults">
        <complexType>
          <sequence>
            <element name="jobid" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="getResultsResponse">
        <complexType>
          <sequence>
            <element name="matcherResult" type="impl:TmatcherResult"/>
          </sequence>
        </complexType>
      </element>
    </schema>
  </wsdl:types>
  <wsdl:message name="getStatusResponse">
    <wsdl:part name="parameters" element="impl:getStatusResponse"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForRequest">
    <wsdl:part name="parameters" element="impl:runAndWaitFor"/>
  </wsdl:message>
  <wsdl:message name="getStatusRequest">
    <wsdl:part name="parameters" element="impl:getStatus"/>
  </wsdl:message>
  <wsdl:message name="createAndRunResponse">
    <wsdl:part name="parameters" element="impl:createAndRunResponse"/>
  </wsdl:message>
  <wsdl:message name="getResultsResponse">
    <wsdl:part name="parameters" element="impl:getResultsResponse"/>
  </wsdl:message>
  <wsdl:message name="waitForRequest">
    <wsdl:part name="parameters" element="impl:waitFor"/>
  </wsdl:message>
  <wsdl:message name="SoaplabException">
    <wsdl:part name="fault" element="impl:fault"/>
  </wsdl:message>
  <wsdl:message name="waitForResponse">
    <wsdl:part name="parameters" element="impl:waitForResponse"/>
  </wsdl:message>
  <wsdl:message name="createAndRunRequest">
    <wsdl:part name="parameters" element="impl:createAndRun"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForResponse">
    <wsdl:part name="parameters" element="impl:runAndWaitForResponse"/>
  </wsdl:message>
  <wsdl:message name="getResultsRequest">
    <wsdl:part name="parameters" element="impl:getResults"/>
  </wsdl:message>
  <wsdl:portType name="alignment_local__matcher">
    <wsdl:operation name="runAndWaitFor">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
      <wsdl:input name="runAndWaitForRequest" message="impl:runAndWaitForRequest"/>
      <wsdl:output name="runAndWaitForResponse" message="impl:runAndWaitForResponse"/>
      <wsdl:fault name="SoaplabException" message="impl:SoaplabException"/>
    </wsdl:operation>
    <wsdl:operation name="createAndRun">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
      <wsdl:input name="createAndRunRequest" message="impl:createAndRunRequest"/>
      <wsdl:output name="createAndRunResponse" message="impl:createAndRunResponse"/>
      <wsdl:fault name="SoaplabException" message="impl:SoaplabException"/>
    </wsdl:operation>
    <wsdl:operation name="waitFor">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
      <wsdl:input name="waitForRequest" message="impl:waitForRequest"/>
      <wsdl:output name="waitForResponse" message="impl:waitForResponse"/>
      <wsdl:fault name="SoaplabException" message="impl:SoaplabException"/>
    </wsdl:operation>
    <wsdl:operation name="getStatus">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Get status information about a running job. Returns immediately.</wsdl:documentation>
      <wsdl:input name="getStatusRequest" message="impl:getStatusRequest"/>
      <wsdl:output name="getStatusResponse" message="impl:getStatusResponse"/>
      <wsdl:fault name="SoaplabException" message="impl:SoaplabException"/>
    </wsdl:operation>
    <wsdl:operation name="getResults">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Get the results of a job (by job-id)</wsdl:documentation>
      <wsdl:input name="getResultsRequest" message="impl:getResultsRequest"/>
      <wsdl:output name="getResultsResponse" message="impl:getResultsResponse"/>
      <wsdl:fault name="SoaplabException" message="impl:SoaplabException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="alignment_local.matcher.derivedSoapBinding" type="impl:alignment_local__matcher">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="runAndWaitFor">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="runAndWaitForRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="runAndWaitForResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoaplabException">
        <wsdlsoap:fault name="SoaplabException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAndRun">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createAndRunRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createAndRunResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoaplabException">
        <wsdlsoap:fault name="SoaplabException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="waitFor">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="waitForRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="waitForResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoaplabException">
        <wsdlsoap:fault name="SoaplabException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getStatus">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Get status information about a running job. Returns immediately.</wsdl:documentation>
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getStatusRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getStatusResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoaplabException">
        <wsdlsoap:fault name="SoaplabException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getResults">
<wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">Get the results of a job (by job-id)</wsdl:documentation>
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getResultsRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getResultsResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SoaplabException">
        <wsdlsoap:fault name="SoaplabException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="matcherService">
    <wsdl:port name="alignment_local.matcher.derived" binding="impl:alignment_local.matcher.derivedSoapBinding">
      <wsdlsoap:address location="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_local.matcher.derived"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
